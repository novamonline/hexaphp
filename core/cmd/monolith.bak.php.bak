<?php 
namespace Core\Cmd;
use RuntimeException;
abstract class BaseCommand
{
    abstract public function execute(array $args): void;

    protected function createDirectory($path)
    {
        if (!is_dir($path)) {
            mkdir($path, 0777, true);
        }
    }

    protected function createFilesFromStubs($stubsDir, $destinationDir)
    {
        $files = scandir($stubsDir);

        foreach ($files as $file) {
            if ($file === '.' || $file === '..') {
                continue;
            }

            $stubPath = "{$stubsDir}/{$file}";
            $destinationPath = "{$destinationDir}/" . str_replace('.stub', '', $file);

            if (is_dir($stubPath)) {
                $this->createDirectory($destinationPath);
                $this->createFilesFromStubs($stubPath, $destinationPath);
            } else {
                $content = file_get_contents($stubPath);
                $content = str_replace('__APP__', basename($destinationDir), $content);
                file_put_contents($destinationPath, $content);
            }
        }
    }

    protected function getPlaceholders(string $jsonFilePath): array
    {
        if (!file_exists($jsonFilePath)) {
            throw new RuntimeException("JSON file not found: {$jsonFilePath}");
        }

        $content = file_get_contents($jsonFilePath);
        $placeholders = json_decode($content, true);

        if (json_last_error() !== JSON_ERROR_NONE) {
            throw new RuntimeException("Invalid JSON in file: {$jsonFilePath}");
        }

        return $placeholders;
    }

    protected function processStubs(string $stubsDir, string $destinationDir, array $replacements): void
    {
        $files = scandir($stubsDir);

        foreach ($files as $file) {
            if ($file === '.' || $file === '..') {
                continue;
            }

            $stubPath = "{$stubsDir}/{$file}";
            $destinationPath = "{$destinationDir}/" . str_replace('.stub', '', $file);

            if (is_dir($stubPath)) {
                $this->createDirectory($destinationPath);
                $this->processStubs($stubPath, $destinationPath, $replacements);
            } else {
                $content = file_get_contents($stubPath);
                $content = str_replace(
                    array_keys($replacements), 
                    array_values($replacements), 
                    $content
            );
                file_put_contents($destinationPath, $content);
            }
        }
    }
}

class CreateAppCmd extends BaseCommand
{
    protected string $appName;
    public function execute(array $args): void
    {
        $this->appName = $args[0];
        $appPath = "./apps/{$this->appName}";
        $this->createDirectory($appPath);

        $placeholders = $this->getPlaceholders('./core/stubs/app_placeholders.json');
        $replacements = array_combine(
            array_keys($placeholders), 
            array_map(fn($varName) => $this->$varName, $placeholders)
        );

        $stubsDir = "./core/stubs/app";
        $this->processStubs($stubsDir, $appPath, $replacements);
    }
}

class CreateLibCmd extends BaseCommand
{
    protected string $libName;
    public function execute(array $args): void
    {
        $this->libName = $args[0];
        $libPath = "./libs/{$this->libName}";
        $this->createDirectory($libPath);

        $placeholders = $this->getPlaceholders('./core/stubs/lib_placeholders.json');
        $replacements = array_combine(
            array_keys($placeholders),
            array_map(fn($varName) => $this->$varName, $placeholders)
        );

        $stubsDir = "./core/stubs/lib";
        $this->processStubs($stubsDir, $libPath, $replacements);
    }
}


if (!defined('DS')) {
    define('DS', DIRECTORY_SEPARATOR);
}
if (!defined('ROOT')) {
    define('ROOT', realpath(__DIR__) . DS);
}
echo 'ROOT: ' . ROOT . "\n";

require_once ROOT . 'core' .DS. 'autoload.php';

use Core\Cmd\CreateAppCmd;
use Core\Cmd\CreateLibCmd;

$args = array_slice($argv, 1);

if (count($args) < 2) {
    echo "Usage: run <Cmd> <name>\n";
    exit(1);
}

$Cmd = strtolower($args[0]);
$name = $args[1];

switch ($Cmd) {
    case 'create:app':
        $createCmd = new CreateAppCmd();
        $createCmd->execute([$name]);
        break;
    case 'create:lib':
        $createCmd = new CreateLibCmd();
        $createCmd->execute([$name]);
        break;
    default:
        echo "Unknown Cmd: {$Cmd}\n";
        exit(1);
}
